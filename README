#README

This project was an attempt to create proof objects, much like a proof assistant would. I wanted to understand more about the innner
workings of Coq and its like, and begin to go beyond tactics and pattern matching.
To that end, I decided to create my own implementation of the STLC and second order lambda calculus (henceforth LC2). My goal
was to eventually begin to prove basic facts about simple data types that can be constructed in LC2. For instance, booleans, natural numbers
and binary trees can all be represented in LC2.
My research primarily consisted of two sources: "Type Theory and Formal Proof: An Introduction", by Rob Nederpelt, and "Lambda Calculus With Types"
by Barendregt. My research focused on the first six chapters of the former, and the first two of the latter.
